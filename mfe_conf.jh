// ------------------ //
// ---  ENTITYS  --- //
// ------------------ //

/** list off the business entitys 
  * managed by this mfe application
*/
entity Businessunit {
    code String required ,
    name String required ,
    description String
    }


enum Accounttype {  // equiv à un role
    TRF ("Linked 2 site"),
    CONF ("For mfe conf usage"),
    GUI  ("For consulting usage")
}
/** More informations about users
  * without changing nativ user "entity  
*/
entity Useraccount { // ! à poursuivre 
    accounttype Accounttype required,
    comment String ,
    creationdate LocalDate required ,
    lastupdated LocalDate required 
// à lier a businessaccount si GUI
// à lier a site si TRF
}

/** state to determine the build 'deployement'
  * status off some components (sites,flows,...)
*/
enum Buildstate {
    NOTBUILD, REQUIRED, BUILDING, ERROR , BUILDED , TODESTROY , DESTROYED 
}

/** type on site determining 
  * role of him in transfert usecase
*/
enum Sitetype {
    INT ("Application site"),
    EXT ("External site"),
    USR ("Site for users usage"),
    NODE ("Site for monitor") 
}

entity Site {
// ajouter une relation n,n buildscope avec businessunit
	name String required,
    sitetype Sitetype required, 
    description String,
    sitenode String required, // point d'entrée
    creationdate LocalDate required,
    lastupdated LocalDate required,
    buildstate Buildstate,
    buildcount Integer,
    buildcomment String
}
enum Xrole {
	CLI (client),
    SRV (serveur)
}
enum XProttype {
	PESITANY ("pesit cft"),
    PESITSSL ("pesit ssl cft"),
    SFTP (sftp)
}

entity XProt { // protocole de transfert 
    xprottype XProttype required ,  
    xrole Xrole required,
    comment String,
    accessAddress String,
    accessServicePoint Integer,
    creationdate LocalDate required,
    lastupdated LocalDate required, 
    buildstate Buildstate,
    buildcount Integer,
    buildcomment String
// à lier a businessaccount si GUI
// à lier a site si TRF
}
/** type on site determining 
  * role of him in transfert usecase
*/
enum Flowusecase {
    A2A ("Application to same application"),
    A2B ("Application to other application"),
    C2P ("Application to external site"),
    P2C ("External site to application"),
    A2U ("Application to user "),
    U2A ("User to application"),
    U2P ("User to external site "),
    P2U ("External site to user") 
}

entity Flow {
	// site or not site ?
	fileIdent String required ,
    flowusecase Flowusecase required,
    description String ,
    creationdate LocalDate required ,
    lastupdated LocalDate required ,
    buildstate Buildstate ,
    buildcount Integer ,
    buildcomment String
}

// ------------------ //
// -- RELATIONSHIP -- //
// ------------------ //

relationship ManyToOne {
    Useraccount{user(login) required} to User
    Site{businessunit(code) required } to Businessunit  // prevoir un multi
    Flow{businessunit(code) required } to Businessunit  // prevoir un multi
    Flow{origin(name) required } to Site
    Flow{destination(name) required } to Site
}

relationship ManyToMany {
    Useraccount to Businessunit
    Useraccount{sites(name)} to Site
}
// ------------------ //
// ----- OPTIONS ---- //
// ------------------ //
// Set pagination options
paginate all with infinite-scroll
paginate Site with pagination

// Use Data Transfer Objects (DTO)
// dto * with mapstruct

// ------------------ //
// ---  SERVICES  --- //
// ------------------ //
// Set service options to all except few
service all with serviceImpl  // except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
